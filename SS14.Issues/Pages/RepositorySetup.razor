@page "/repositorysetup"

@using SS14.Issues.Data
@using SS14.Issues.Data.Model
@using SS14.Issues.Pages.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Quartz
@using Serilog
@using SS14.Issues.Jobs
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigator
@inject IJSRuntime JsRuntime
@inject ISchedulerFactory SchedulerFactory
@inject ToastService ToastService

<PageTitle>Repository Setup</PageTitle>
<div class="d-flex flex-items-center flex-justify-between mr-4">
    <h1 class="mt-4 mb-3">Configured Repositories</h1>
    <button class="btn btn-primary mt-3" id="mockup-open" @onclick="@HandleNewConfigurationClick" type="button">New Configuration</button>
</div>

<div class="mr-4">
    <table id="repository-config-table" class="responsive-table width-full">
        <thead class="responsive-table">
        <tr>
            <th>Name</th>
            <th>Repository</th>
            <th>Slug</th>
            <th class="text-center">Login</th>
            <th></th>
        </tr>
        </thead>
        <tbody class="responsive-table">
        @if (_configs == null)
        {
            <tr>
                <td>
                    <span>Loading</span><span class="AnimatedEllipsis"></span>
                </td>
                <td></td><td></td><td></td><td></td>
            </tr>
        }
        else
        {
            @foreach (var config in _configs)
            {
                <tr>
                    <td>@config.Name</td>
                    <td>@config.GhRepoSearchKey</td>
                    <td>
                        @config.Slug <a class="btn-octicon btn-sm icon" data-icon="link" type="button" href="@(Navigator.BaseUri)report/@config.Slug" target="_blank"></a>
                    </td>
                    @if (config.AuthRequired)
                    {
                        <td class="color-fg-success text-center">
                            <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M8 16A8 8 0 108 0a8 8 0 000 16zm3.78-9.72a.75.75 0 00-1.06-1.06L6.75 9.19 5.28 7.72a.75.75 0 00-1.06 1.06l2 2a.75.75 0 001.06 0l4.5-4.5z"></path>
                            </svg>
                        </td>
                    }
                    else
                    {
                        <td class="color-fg-danger text-center">
                            <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M2.343 13.657A8 8 0 1113.657 2.343 8 8 0 012.343 13.657zM6.03 4.97a.75.75 0 00-1.06 1.06L6.94 8 4.97 9.97a.75.75 0 101.06 1.06L8 9.06l1.97 1.97a.75.75 0 101.06-1.06L9.06 8l1.97-1.97a.75.75 0 10-1.06-1.06L8 6.94 6.03 4.97z"></path>
                            </svg>
                        </td>
                    }
                    <td>
                        <button class="btn-octicon" type="button" @onclick="() => OnSync(config.Id)" aria-label="Sync icon">
                            <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M8 2.5a5.487 5.487 0 00-4.131 1.869l1.204 1.204A.25.25 0 014.896 6H1.25A.25.25 0 011 5.75V2.104a.25.25 0 01.427-.177l1.38 1.38A7.001 7.001 0 0114.95 7.16a.75.75 0 11-1.49.178A5.501 5.501 0 008 2.5zM1.705 8.005a.75.75 0 01.834.656 5.501 5.501 0 009.592 2.97l-1.204-1.204a.25.25 0 01.177-.427h3.646a.25.25 0 01.25.25v3.646a.25.25 0 01-.427.177l-1.38-1.38A7.001 7.001 0 011.05 8.84a.75.75 0 01.656-.834z"></path>
                            </svg>
                        </button>
                        <button class="btn-octicon" type="button" @onclick="() => OnEdit(config.Id)" aria-label="Pencil icon">
                            <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M11.013 1.427a1.75 1.75 0 012.474 0l1.086 1.086a1.75 1.75 0 010 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 01-.927-.928l.929-3.25a1.75 1.75 0 01.445-.758l8.61-8.61zm1.414 1.06a.25.25 0 00-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 000-.354l-1.086-1.086zM11.189 6.25L9.75 4.81l-6.286 6.287a.25.25 0 00-.064.108l-.558 1.953 1.953-.558a.249.249 0 00.108-.064l6.286-6.286z"></path>
                            </svg>
                        </button>
                        <button class="btn-octicon btn-octicon-danger" type="button" @onclick="async () => await OnDelete(config.Id)" aria-label="Trashcan icon">
                            <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M6.5 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25V3h-3V1.75zm4.5 0V3h2.25a.75.75 0 010 1.5H2.75a.75.75 0 010-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75zM4.496 6.675a.75.75 0 10-1.492.15l.66 6.6A1.75 1.75 0 005.405 15h5.19c.9 0 1.652-.681 1.741-1.576l.66-6.6a.75.75 0 00-1.492-.149l-.66 6.6a.25.25 0 01-.249.225h-5.19a.25.25 0 01-.249-.225l-.66-6.6z"></path>
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    @if (_configs != null)
    {
        <nav class="paginate-container" aria-label="Pagination">
            <div class="pagination">
                @if (Page == 0)
                {
                    <span class="previous_page" aria-disabled="true">Previous</span>
                }
                else
                {
                    <a class="previous_page" rel="previous" href="@Navigator.Uri?page=@(Page - 1)" aria-label="Previous Page">Previous</a>
                }
                <span class="gap">@Page / @(_count != 0 && Limit != 0 ? _count / Limit : 0)</span>
                @if (Page * Limit >= _count)
                {
                    <span class="next_page" aria-disabled="true">Next</span>
                }
                else
                {
                    <a class="next_page" rel="next" href="@Navigator.Uri?page=@(Page + 1)" aria-label="Next Page">Next</a>
                }
            </div>
        </nav>
    }
</div>

@if (_editRepoConfig != null && _showForm)
{
    <div class="container-lg Box mt-6 modal" data-hidden=true>
        <div class="Box-header">
            <h2 class="">Repository Setup</h2>
            <p class="color-fg-subtle mt-2 pr-5">
                <span class="icon icon-align-text-1" data-icon="alert-fill" data-icon-size="12">
                    <svg class="octicon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12" width="12" height="12">
                        <path fill-rule="evenodd" d="M4.855.708c.5-.896 1.79-.896 2.29 0l4.675 8.351a1.312 1.312 0 01-1.146 1.954H1.33A1.312 1.312 0 01.183 9.058L4.855.708zM7 7V3H5v4h2zm-1 3a1 1 0 100-2 1 1 0 000 2z"></path>
                    </svg>
                </span> The SS14.Issues Github app needs to be installed on the account owning the repository you want to set up and the app needs be allowed to access it.
            </p>
        </div>
        <div class="Box-body">
            <RepoConfigForm RepoConfig="@_editRepoConfig" OnFormSubmit="@HandleRepoConfigFormSubmit"></RepoConfigForm>
        </div>
    </div>
    <div class="modal-overlay" data-hidden=true></div>
}


@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int Page { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "limit")]
    public int Limit { get; set; } = 0;

    private bool _showForm = false;
    private List<RepoConfig>? _configs;
    private int _count = 0;
    private RepoConfig? _editRepoConfig;

    protected override async Task OnInitializedAsync()
    {
        _count = await DbContext.RepoConfigs.CountAsync();
        _configs = await DbContext.RepoConfigs.OrderBy(c => c.Id).Skip(0).Take(20).ToListAsync();
    }

    private void HandleNewConfigurationClick()
    {
        _editRepoConfig = new RepoConfig();
        _showForm = true;
        StateHasChanged();
    }

    private void HandleRepoConfigFormSubmit(RepoConfig config)
    {
        DbContext.RepoConfigs.Update(config);
        DbContext.SaveChanges();
        _showForm = false;
        _count = DbContext.RepoConfigs.Count();
        _configs = DbContext.RepoConfigs.OrderBy(c => c.Id).Skip(0).Take(20).ToList();
        StateHasChanged();
    }

    private void OnEdit(Guid configId)
    {
        _editRepoConfig = DbContext.RepoConfigs.Find(configId);
        _showForm = true;
        StateHasChanged();
    }

    private async Task OnDelete(Guid configId)
    {
        var config = await DbContext.RepoConfigs.FindAsync(configId);

        if (config != null)
        {
            DbContext.RepoConfigs.Remove(config);
            await DbContext.SaveChangesAsync();
        }

        _count = await DbContext.RepoConfigs.CountAsync();
        _configs = await DbContext.RepoConfigs.OrderBy(c => c.Id).Skip(0).Take(20).ToListAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("populateOcticons");
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to populate octicons");
        }
    }

    private async Task OnSync(Guid configId)
    {
        var job = JobBuilder.Create<SyncIssuesForRepo>()
            .UsingJobData(SyncIssuesForRepo.ConfigIdKey, configId)
            .WithIdentity("RepoIssueSync", "sync")
            .Build();
        
        var trigger = TriggerBuilder.Create()
            .ForJob(job)
            .WithIdentity("RepoIssueSync-trigger", "sync")
            .StartNow()
            .Build();


        var scheduler = await SchedulerFactory.GetScheduler();
        await scheduler.ScheduleJob(job, trigger);

        ToastService.ShowToast("Started issue synchronization", ToastLevel.Success);
    }

}