@page "/issues/form"

@using SS14.Issues.Pages.Components
@using SS14.Issues.Pages.Components.Forms
@using SS14.Issues.Data.Model
@using SS14.Issues.Data
@using Microsoft.EntityFrameworkCore
@using SS14.Issues.Services
@inject ApplicationDbContext DbContext
@inject GithubApiService GithubApiService

<PageTitle>Create new issue</PageTitle>
<div class="d-flex flex-items-baseline mr-4">
    <h1 class="mt-4 mb-3 mr-1">Create new issue</h1>
    @if (_repositories == null)
    {
        <div class="form-select form-input-wide" disabled>
            <span>Loading</span><span class="AnimatedEllipsis"></span>
        </div>
    }
    else
    {
        <select TValue="int" class="form-select form-input-wide" id="installation-select" @oninput="@HandleRepositorySelect">
            <option value="">Select a repository</option>
            @foreach (var repository in _repositories.Values)
            {
                <option value="@repository.Id">@repository.Name</option>
            }
        </select>
    }
</div>

@if (_repoKey != null)
{
    <div class="d-flex flex-column flex-lg-row px-6 pt-3" style="min-height: 83vh;">
        <div class="flex-self-stretch mr-6 mb-4 mb-lg-0 width-sm-full issue-form-layout-left">
            <IssueForm OnTitleChange="async e => await OnTitleChanged(e)" OnFormSubmit="@OnFormSubmit"></IssueForm>
        </div>
        <div class="issue-form-layout-right">
            <IssueSearchDisplay @ref="@_issueSearchDisplay" RepoKey="@_repoKey"></IssueSearchDisplay>
        </div>
    </div>
}

@code
{
    private IssueSearchDisplay? _issueSearchDisplay;
    private Dictionary<Guid, RepoConfig>? _repositories;
    private string _title = string.Empty;
    private string? _repoKey;
    private RepoConfig? _selectedRepoConfig;

    private async Task OnTitleChanged(string title)
    {
        _title = title;
        await _issueSearchDisplay?.UpdateSearch(_title)!;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var configs = await DbContext.RepoConfigs.ToListAsync();
        _repositories = configs.ToDictionary(c => c.Id);
    }

    private void HandleRepositorySelect(ChangeEventArgs args)
    {
        if (args.Value is not string id || _repositories == null || !_repositories.TryGetValue(Guid.Parse(id), out var config))
            return;

        _repoKey = config?.GhRepoSearchKey;
        _selectedRepoConfig = config;
        StateHasChanged();
    }

    private void OnFormSubmit(IssueCreationParameters args)
    {
        if (_selectedRepoConfig == null)
         return;
        
        GithubApiService.CreateIssue(_selectedRepoConfig.GhInstallationId, _selectedRepoConfig.GhRepoId, args);
    }
}